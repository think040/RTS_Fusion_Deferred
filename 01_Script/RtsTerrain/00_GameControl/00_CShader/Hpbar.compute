#include "../../../Utility/00_CShader/UtilityCS.hlsl"

#pragma kernel CS_trW
#pragma kernel CS_Vertex;
#define CUBE_NUM 24


struct Vertex
{
    float3 pos;
    float3 nom;
};


StructuredBuffer<float4x4> trW_In_Buffer;
StructuredBuffer<float4x4> trW_Const_Buffer;
RWStructuredBuffer<float4x4> trW_Out_Buffer;
RWStructuredBuffer<float> refHp_Buffer;

[numthreads(64, 1, 1)]
void CS_trW(uint3 dtid : SV_DispatchThreadID, uint3 gid : SV_GroupID, uint3 gtid : SV_GroupThreadID, uint gidx : SV_GroupIndex)
{
    uint idx = gid.x * 64 + gtid.x;
    
    float4x4 trW_In = trW_In_Buffer[idx];
    float4x4 trW_Const = trW_Const_Buffer[idx];
    float4x4 trW_Out = f4x4Zero;
    
    float3x3 R = f3x3I;
    R.v3c0 = trW_In.v3c0;
    R.v3c1 = trW_In.v3c1;
    R.v3c2 = trW_In.v3c2;
    float3 pos = trW_In.v3c3;
    float hp = trW_In.v4c3.w;
    
    float3 sca0 =   trW_Const.v3c0;
    float3 offset0 = trW_Const.v3c1;       
    float maxHp =   trW_Const.v3c2.x;
            
    float rHp = hp / maxHp;
    
    {
        float3 sca1 = sca0 * float3(rHp, 1.0f, 1.0f);
        
        //float3 offset1 = offset0 + R.v3c0 * float3(0.5f * (sca0.x - sca1.x), 0.0f, 0.0f);
        float3 offset1 = offset0 + R.v3c0 * (0.5f * (sca0.x - sca1.x));
        
        trW_Out.v4c0 = float4(sca1.x * R.v3c0, 0.0f);
        trW_Out.v4c1 = float4(sca1.y * R.v3c1, 0.0f);
        trW_Out.v4c2 = float4(sca1.z * R.v3c2, 0.0f);
        trW_Out.v4c3 = float4(pos + offset1, 1.0f);
    }
    
    //{
    //    float3 sca1 = float3(sca0.x * rHp, sca0.y, sca0.z);
    //
    //    float4x4 m0 = f4x4I;
    //    m0.v4c0 = float4(R.v3c0, 0.0f);
    //    m0.v4c1 = float4(R.v3c1, 0.0f);
    //    m0.v4c2 = float4(R.v3c2, 0.0f);
    //    m0.v4c3 = float4(pos + offset0, 1.0f);
    //
    //    float4x4 m1 = f4x4I;
    //    m1.v4c0.x = sca1.x;
    //    m1.v4c1.y = sca1.y;
    //    m1.v4c2.z = sca1.z;
    //    m1.v4c3.x = 0.5f * (sca0.x - sca1.x);
    //
    //    m0 = mul(m0, m1);
    //    
    //    trW_Out = m0;
    //}
                            
    //trW_Out.v4c0 = float4(R.v3c0, 0.0f);
    //trW_Out.v4c1 = float4(R.v3c1, 0.0f);
    //trW_Out.v4c2 = float4(R.v3c2, 0.0f);
    //trW_Out.v4c3 = float4(pos + float3(0.0f, 2.0f, 0.0f), 1.0f);
    
    trW_Out_Buffer[idx] = trW_Out;
    refHp_Buffer[idx] = rHp;
}

StructuredBuffer<Vertex> vertex_In_Buffer;
RWStructuredBuffer<Vertex> vertex_Out_Buffer;

[numthreads(CUBE_NUM, 1, 1)]
void CS_Vertex(uint3 dtid : SV_DispatchThreadID, uint3 gid : SV_GroupID, uint3 gtid : SV_GroupThreadID, uint gidx : SV_GroupIndex)
{
    uint id_in = gtid.x;
    uint id_out = gid.x * CUBE_NUM + id_in;
    
    Vertex vIn = vertex_In_Buffer[id_in];
    Vertex vOut;
    
    float4x4 W = trW_Out_Buffer[gid.x];
    
    vOut.pos = mul(W, float4(vIn.pos, 1.0f)).xyz;
    vOut.nom = mul((float3x3) W, vIn.nom);

    vertex_Out_Buffer[id_out] = vOut;
}